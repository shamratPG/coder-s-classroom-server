[
    {
        "id": "1a",
        "name": "What is CORS?",
        "description": "Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a 'preflight' request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json.For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.",
        "img": "https://github.com/shamratPG/images/blob/main/codersClassroom/corsExplained.jpg?raw=true"
    },
    {
        "id": "2b",
        "name": "Why do we use firebase?",
        "description": "Founded in 2011 as a chat API and acquired by Google in 2014, Google Firebase is a platform that now offers active backend as a service (BaaS) for building dynamic web and mobile apps. Firebase concept is simple. When you build a client-side app with JavaScript or any of its frameworks, for instance, Google Firebase can turn this into a serverless app in no time. It also removes the need to manage databases yourself, as it does that for you. Therefore, implementing Firebase means plugging a ready-made backend into your client code to make it dynamic. Ultimately, it eliminates the need to write backend code from scratch and gives you a fully functional one instead.Security-wise, it also has explicitly built-in security rules that make it a trusted data and server handler. Plus, you get a protected backend when you use these rules.",
        "img": "https://github.com/shamratPG/images/blob/main/codersClassroom/firebase.jpg?raw=true"
    },
    {
        "id": "3c",
        "name": "How Does Private Routes Work?",
        "description": "The private route component is similar to the public route, the only change is that redirect URL and authenticate condition.  If the user is not authenticated he will be redirected to the login page and the user can only access the authenticated routes If he is authenticated (Logged in). Here we have wrapped non authenticated routes with <PublicRoute /> component and authenticated routes with <PrivateRoute /> component. We have used suspense to add lazy loading to components.        Now we have configured Private and Public Routes. If there is no match <NoFoundComponent /> will be rendered. Public and Private routes will also restrict accessing the previously visited routes using the browser back button after logout. I hope you have found this useful. Thank you for reading.",
        "img": "https://github.com/shamratPG/images/blob/main/codersClassroom/privateRoute.jpg?raw=true"
    },
    {
        "id": "4d",
        "name": "What is Node? How Does Node Work?",
        "description": "Node.js is an open-source backend javascript runtime environment. It is a used as backend service where javascript works on the server-side of the application. This way javascript is used on both frontend and backend. Node.js runs on chrome v8 engine which converts javascript code into machine code, it is highly scalable, lightweight, fast, and data-intensive. Working of Node.js: Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request.Non-blocking i/o  means working with multiple requests without blocking the thread for a single request. I/O basically interacts with external systems such as files, databases. Node.js is not used for CPU-intensive work means for calculations, video processing because a single thread cannot handle the CPU works.",
        "img": "https://github.com/shamratPG/images/blob/main/codersClassroom/node.jpg?raw=true"
    }
]